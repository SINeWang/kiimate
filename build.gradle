buildscript {
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.6.0'
    id 'org.springframework.boot' version '1.5.3.RELEASE' apply false
    id 'idea'
}

ext {
    deridVersion = '0.1.1'
    guavaVersion = '21.0'
    jacksondatabindVersion = '2.8.8'
    junitVersion = '4.12'
    lombokVersion = '1.16.16'
    mybatisSpringBootStarterVerison = "1.2.0"
    mysqlConnectorVersion = '5.1.41'
    servletApiVersion = '3.1.0'
    springBootVersion = '1.5.3.RELEASE'
    springFrameworkVersion = '4.3.8.RELEASE'
    summerVersion = '0.5.25'
}

scmVersion {
    tag {
        prefix = 'kiimate'
    }
}

allprojects {
    project.version = scmVersion.version
    apply plugin: 'maven-publish-auth'

    group 'one.kii.kiimate'
}

subprojects {

    buildscript {
        dependencies {
            classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
    apply plugin: 'java'
    apply plugin: "maven"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testCompile "junit:junit:${junitVersion}"
    }

}


configure(subprojects.findAll { it.name.endsWith("spec") }) {

    dependencies {

        compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        compile group: "one.kii.summer", name: "summer-asdf", version: "${summerVersion}", changing: true
        compile group: "one.kii.summer", name: "summer-beans", version: "${summerVersion}", changing: true
        compile group: "one.kii.summer", name: "summer-io", version: "${summerVersion}", changing: true
        compile group: "one.kii.summer", name: "summer-zoom", version: "${summerVersion}", changing: true

        testCompile("one.kii.derid:derid64:${deridVersion}")


        compile("org.springframework:spring-tx:${springFrameworkVersion}")
        compile("org.springframework:spring-web:${springFrameworkVersion}")

        compile "com.google.guava:guava:${guavaVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksondatabindVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksondatabindVersion}"

        compile "javax.servlet:javax.servlet-api:${servletApiVersion}"

        testCompile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    }
}

configure(subprojects.findAll { it.name.endsWith("impl") }) {

    apply plugin: 'org.springframework.boot'

    dependencies {

        compile("commons-codec:commons-codec:1.10")

        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootStarterVerison}")
        compile("mysql:mysql-connector-java:${mysqlConnectorVersion}")

        compile group: "one.kii.summer", name: "summer-beans", version: "${summerVersion}", changing: true
        compile group: "one.kii.summer", name: "summer-io", version: "${summerVersion}", changing: true

        compile("one.kii.derid:derid64:${deridVersion}")

        compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

configure(subprojects.findAll { it.name.endsWith("test") }) {

    apply plugin: 'org.springframework.boot'

    dependencies {

        compile("org.springframework.boot:spring-boot-devtools")

        testCompile group: "one.kii.summer", name: "summer-beans", version: "${summerVersion}", changing: true
        testCompile group: "one.kii.summer", name: "summer-io", version: "${summerVersion}", changing: true

        testCompile("one.kii.derid:derid64:${deridVersion}")


        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootStarterVerison}")
        compile("mysql:mysql-connector-java:${mysqlConnectorVersion}")

        testCompile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

        testCompile("com.fasterxml.jackson.core:jackson-databind:${jacksondatabindVersion}")

    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}